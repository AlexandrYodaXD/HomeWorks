from random import randint
from aiogram import types
from asyncio import sleep
from bot import dp, bot
from keyboards import plus_minus_num_kb, who_start_kb, grab_candy_kb, yes_no_kb, support_kb

MIN_RND_CANDY = 33
MAX_RND_CANDY = 333
GRAB_COUNT_CANDY = 28
user_data = {}


@dp.callback_query_handler(text='candy_game')
async def candy_game_handler(callback: types.CallbackQuery):
    await callback.message.answer('–ê —Å–º–µ–ª–æ—Å—Ç–∏ —Ç–µ–±–µ –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å —è –ø–æ—Å–º–æ—Ç—Ä—é! üí™\n'
                                  '–•–æ—Ä–æ—à–æ, —Å—ã–≥—Ä–∞–µ–º –≤ <b>"Candy Game"</b>! üç¨üç¨\n\n'
                                  '‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞ —É –∏–≥—Ä—ã –ø—Ä–æ—Å—Ç—ã:\n'
                                  '1Ô∏è‚É£ –ù–∞ —Å—Ç–æ–ª –∫–ª–∞–¥–µ—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç.\n'
                                  '2Ô∏è‚É£ –ú—ã —Å —Ç–æ–±–æ–π –ø–æ-–æ—á–µ—Ä–µ–¥–∏ –±–µ—Ä—ë–º —Å–æ —Å—Ç–æ–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç, '
                                  '–Ω–æ <b>–Ω–µ –º–µ–Ω–µ–µ <u>–æ–¥–Ω–æ–π</u></b> –∏ <b>–Ω–µ –±–æ–ª–µ–µ <u>–¥–≤–∞–¥—Ü–∞—Ç–∏ –≤–æ—Å—å–º–∏</u></b>.\n'
                                  '‚úÖ <b>–ü–æ–±–µ–¥–∏—Ç —Ç–æ—Ç –∫—Ç–æ –∑–∞–±–µ—Ä—ë—Ç —Å–æ —Å—Ç–æ–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ç—ã!</b>\n\n'
                                  'üÜò –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.',
                                  reply_markup=support_kb.get_kb())
    await ask_total_candy(callback.message.chat.id)
    await callback.answer()


def get_random_candy():
    return randint(MIN_RND_CANDY, MAX_RND_CANDY)


def get_candy_ending(count: int):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–æ "–∫–æ–Ω—Ñ–µ—Ç–∞" —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º'''
    n = abs(count)
    n %= 100
    if 5 <= n <= 20:
        return '–∫–æ–Ω—Ñ–µ—Ç'
    n %= 10
    if n == 1:
        return '–∫–æ–Ω—Ñ–µ—Ç–∞'
    elif 2 <= n <= 4:
        return '–∫–æ–Ω—Ñ–µ—Ç—ã'
    else:
        return '–∫–æ–Ω—Ñ–µ—Ç'


async def ask_total_candy(chat_id):
    # –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ –∫–ª—é—á—É id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—ç—Ç–æ id —á–∞—Ç–∞ –¥–ª—è –±–æ—Ç–∞) –∑–∞–Ω–æ—Å–∏—Ç—Å—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    user_data[chat_id] = {
        'total_candy': randint(MIN_RND_CANDY, MAX_RND_CANDY),
        'current_round': 0}
    print(user_data)
    # user_data[chat_id]['total_candy'] = randint(MIN_RND_CANDY, MAX_RND_CANDY)
    total_candy = user_data[chat_id].get('total_candy')
    candy_word = get_candy_ending(total_candy)
    await bot.send_message(chat_id=chat_id,
                           text=f'–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –±—É–¥–µ—Ç –Ω–∞ —Å—Ç–æ–ª–µ.'
                           )
    await bot.send_message(chat_id=chat_id,
                           text=f'–°–µ–π—á–∞—Å –Ω–∞ —Å—Ç–æ–ª–µ <b>{total_candy}</b> üç¨ {candy_word}.',
                           reply_markup=plus_minus_num_kb.get_kb()
                           )


async def update_num_text(message: types.Message, new_value: int):
    candy_word = get_candy_ending(new_value)
    new_text = f'–°–µ–π—á–∞—Å –Ω–∞ —Å—Ç–æ–ª–µ <b>{new_value}</b> üç¨ {candy_word}.'
    if message.html_text != new_text:
        await message.edit_text(
            new_text,
            reply_markup=plus_minus_num_kb.get_kb()
        )


@dp.callback_query_handler(text=plus_minus_num_kb.callback_list)
async def change_total_candy(callback: types.CallbackQuery):
    action = callback.data
    user_id = callback.from_user.id
    total_candy = user_data[user_id].get('total_candy', 0)
    _, operation, number = action.split('_')
    # —É–≤–µ–ª–∏—á–µ–Ω–∏–µ/—É–º–µ–Ω—å—à–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ç –Ω–∞ —Å—Ç–æ–ª–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ
    if operation == 'plus' and number.isdigit():
        user_data[user_id]['total_candy'] = total_candy + int(number)
    elif operation == 'minus' and number.isdigit():
        user_data[user_id]['total_candy'] = total_candy - int(number)
    # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ñ–µ—Ç –Ω–∞ —Å—Ç–æ–ª–µ
    if user_data[user_id]['total_candy'] < GRAB_COUNT_CANDY + 1:
        user_data[user_id]['total_candy'] = GRAB_COUNT_CANDY + 1
        await callback.answer(
            f'–ù–∞ —Å—Ç–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –ª–µ–∂–∞—Ç—å –º–µ–Ω—å—à–µ {GRAB_COUNT_CANDY + 1} {get_candy_ending(GRAB_COUNT_CANDY + 1)}.'
        )
    # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–æ–Ω—Ñ–µ—Ç –Ω–∞ —Å—Ç–æ–ª–µ
    await update_num_text(callback.message, user_data[user_id]['total_candy'])
    # –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    if action == 'kb_plusminus_accept':
        candy_word = get_candy_ending(total_candy)
        await callback.message.edit_text(
            f'–ò—Ç–∞–∫, –Ω–∞ —Å—Ç–æ–ª–µ <u><b>{total_candy}</b></u> üç¨ {candy_word}.',
        )
        await ask_who_start(callback.from_user.id)

    await callback.answer()


async def ask_who_start(chat_id):
    await bot.send_message(chat_id=chat_id,
                           text=f'–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º –∫—Ç–æ –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–º.',
                           reply_markup=who_start_kb.get_kb())


@dp.callback_query_handler(text=who_start_kb.callback_list)
async def set_who_start(callback: types.CallbackQuery):
    action = callback.data
    user_id = callback.from_user.id
    who_start = ''

    if action == 'kb_who_start_player':
        await callback.message.edit_text(text='–ù—É –∫–æ–Ω–µ—á–Ω–æ –∂–µ —Ç—ã –≤—ã–±—Ä–∞–ª —Ö–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–º! üòé\n'
                                              '–ö—É–∫–æ–ª-–º–∞–Ω—å—è–∫–æ–≤ –≤ –Ω–∞—à–µ –≤—Ä–µ–º—è —É–∂–µ —Å–æ–≤—Å–µ–º –Ω–µ —É–≤–∞–∂–∞—é—Ç... üëø')
        await lets_start_play(user_id, 'player')
    elif action == 'kb_who_start_bot':
        await callback.message.edit_text(text='–û–æ–æ–æ—É—É—É! –≠—Ç–æ —Ç–∞–∫ –º–∏–ª–æ —á—Ç–æ —Ç—ã –ø–æ–∑–≤–æ–ª–∏–ª –º–Ω–µ —Ö–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–º! ü§°\n'
                                              '–ù–µ –ø–æ–∂–∞–ª–µ–π —Ç–µ–ø–µ—Ä—å! üòà')
        await lets_start_play(user_id, 'bot')
    elif action == 'kb_who_start_fate':
        await callback.message.edit_text('–ê–∑–∞—Ä—Ç–Ω—ã–π, –∑–Ω–∞—á–∏—Ç? –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è! üëç\n\n'
                                         '–ë—Ä–æ—Å–∏–º –∫–æ—Å—Ç—å! üé≤\n'
                                         '–ß–µ—Ç - <b>—Ç—ã</b> —Ö–æ–¥–∏—à—å –ø–µ—Ä–≤—ã–º,\n'
                                         '–ù–µ—á–µ—Ç - <b>—è</b> —Ö–æ–∂—É –ø–µ—Ä–≤—ã–º!')
        dice_msg = await callback.message.answer_dice()
        dice_value = dice_msg.dice.value
        await sleep(5)
        if dice_value % 2:
            await callback.message.answer(f'–í—ã–ø–∞–ª–æ <b>{dice_value}</b> - —á–µ—Ç.\n'
                                          f'–¢—ã —Ö–æ–¥–∏—à—å –ø–µ—Ä–≤—ã–º!\n'
                                          f'<s><em>–í–µ–∑—É–Ω—á–∏–∫! üëø</em></s>')
            await lets_start_play(user_id, 'player')
        else:
            await callback.message.answer(f'–í—ã–ø–∞–ª–æ <b>{dice_value}</b> - –Ω–µ—á–µ—Ç.\n'
                                          f'–Ø —Ö–æ–∂—É –ø–µ—Ä–≤—ã–º!\n'
                                          f'<s><em>–ü—Ä–∞–≤–¥–∞, —Ç—ã —É–∂–µ –ø—Ä–æ–∏–≥—Ä–∞–ª... üòà</em></s>')
            await lets_start_play(user_id, 'bot')
    await callback.answer()


async def lets_start_play(user_id: int, who_start: str):
    await sleep(1)
    await bot.send_message(chat_id=user_id, text='–ù–∞—á–Ω—ë–º –∏–≥—Ä—É!')
    user_data[user_id]['who_start'] = who_start

    await candy_game_round(user_id, whose_turn=who_start)


async def candy_game_round(user_id: int, whose_turn: str):
    leftover_candy = user_data[user_id]['total_candy']

    who_start = user_data[user_id]['who_start']
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
    if leftover_candy <= 0:
        winner = ['bot', 'player'][whose_turn == 'bot']
        if winner == 'player':
            await bot.send_message(chat_id=user_id,
                                   text=f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø–æ–±–µ–¥–∏–ª! üëø\n'
                                        f'–í–æ—Ç —Ç–≤–æ—è –º–µ–¥–∞–ª—å - ü•á.')
        else:
            await bot.send_message(chat_id=user_id,
                                   text=f'üéâ –•–ê! –Ø –ø–æ–±–µ–¥–∏–ª! üòà\n'
                                        f'EZ, –¥–∞–∂–µ –Ω–µ –≤—Å–ø–æ—Ç–µ–ª!')
        await bot.send_message(chat_id=user_id,
                               text='–°—ã–≥—Ä–∞–µ–º –µ—â—ë?',
                               reply_markup=yes_no_kb.get_kb())
    else:
        candy_word = get_candy_ending(leftover_candy)
        if who_start == whose_turn:
            user_data[user_id]['current_round'] += 1
            # round_counter = user_data[user_id]['current_round']
            bot_text = f'–†–∞—É–Ω–¥ {user_data[user_id]["current_round"]}.\n' \
                       f'–°–µ–π—á–∞—Å –Ω–∞ —Å—Ç–æ–ª–µ <b>{leftover_candy}</b> üç¨ {candy_word}.'
        else:
            bot_text = f'–°–µ–π—á–∞—Å –Ω–∞ —Å—Ç–æ–ª–µ <b>{leftover_candy}</b> üç¨ {candy_word}.'
        await bot.send_message(chat_id=user_id,
                               text=bot_text)
        # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–ª—è –≤–∑—è—Ç–∏—è –∫–æ–ª-–≤–∞ –∫–æ–Ω—Ñ–µ—Ç
        if leftover_candy > GRAB_COUNT_CANDY:
            available = GRAB_COUNT_CANDY
        else:
            available = leftover_candy
        # —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –±–æ—Ç–∞
        if whose_turn == 'player':
            await get_player_grab(user_id, available)
        elif whose_turn == 'bot':
            await bot.send_message(chat_id=user_id,
                                   text='–ú–æ–π —Ö–æ–¥... ü§î')
            await sleep(2)
            await get_bot_grab(user_id, available)


async def get_player_grab(user_id: int, available: int):
    await bot.send_message(chat_id=user_id,
                           text='–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç –±–µ—Ä–µ—à—å?',
                           reply_markup=grab_candy_kb.get_kb(available)
                           )


@dp.callback_query_handler(text=grab_candy_kb.callback_list)
async def player_grab(callback: types.CallbackQuery):
    action = callback.data
    user_id = callback.from_user.id
    grab_count = int(action.split('_')[-1])
    user_data[user_id]['total_candy'] -= grab_count
    candy_word = get_candy_ending(grab_count)
    if user_data[user_id]['total_candy'] > 0:
        await callback.message.edit_text(text=f'–¢—ã –≤–∑—è–ª {grab_count} üç¨ {candy_word}.')
    else:
        await callback.message.edit_text(text=f'–¢—ã –≤–∑—è–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ {grab_count} üç¨ {candy_word}!')
    await candy_game_round(user_id=user_id, whose_turn='bot')


async def get_bot_grab(user_id: int, available: int):
    leftover_candy = user_data[user_id]['total_candy']
    bot_grab = leftover_candy % (GRAB_COUNT_CANDY + 1)
    candy_word = get_candy_ending(bot_grab)
    if bot_grab == 0:
        bot_grab = 1
    user_data[user_id]['total_candy'] -= bot_grab
    if user_data[user_id]['total_candy'] > 0:
        await bot.send_message(chat_id=user_id,
                               text=f'–Ø –≤–∑—è–ª {bot_grab} üç¨ {candy_word}.')
    else:
        await bot.send_message(chat_id=user_id,
                               text=f'–Ø –≤–∑—è–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ {bot_grab} üç¨ {candy_word}!')
    await candy_game_round(user_id=user_id, whose_turn='player')


@dp.callback_query_handler(text=yes_no_kb.callback_list)
async def get_restart_answer(callback: types.CallbackQuery):
    action = callback.data
    user_id = callback.from_user.id
    if action == 'kb_yesno_yes':
        await ask_total_candy(user_id)
    elif action == 'kb_yesno_no':
        img = open('media\\wolf.jpeg', 'rb')
        await bot.send_photo(chat_id=user_id,
                             photo=img,
                             caption=f'–õ–∞–¥–Ω–æ...\n'
                                     f'–ù–æ –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –µ—â–µ –ø–æ–∏–≥—Ä–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start')
    await callback.answer()
